{
  harness: {
    Messages: [
      {
        Published: SagaStateMachineTests.Start,
        MessageId: Guid_1,
        ConversationId: Guid_2,
        DestinationAddress: Tests:SagaStateMachineTests+Start,
        Message: {
          CorrelationId: Guid_3
        }
      },
      {
        Received: SagaStateMachineTests.Start,
        MessageId: Guid_1,
        ConversationId: Guid_2,
        DestinationAddress: Tests:SagaStateMachineTests+Start,
        Message: {
          CorrelationId: Guid_3
        }
      }
    ]
  },
  sagaHarness: {
    Consumed: [
      {
        Received: SagaStateMachineTests.Start,
        MessageId: Guid_1,
        ConversationId: Guid_2,
        DestinationAddress: Tests:SagaStateMachineTests+Start,
        Message: {
          CorrelationId: Guid_3
        }
      }
    ],
    Sagas: [
      {
        Saga: {
          CorrelationId: Guid_3,
          CurrentState: Final,
          StartMessageReceived: true
        },
        ElementId: Guid_3
      }
    ],
    Created: [
      {
        Saga: {
          CorrelationId: Guid_3,
          CurrentState: Final,
          StartMessageReceived: true
        },
        ElementId: Guid_3
      }
    ],
    StateMachine: {
      StartEvent: {
        Name: StartEvent
      },
      Started: {
        Name: Started,
        Enter: {
          Name: Started.Enter
        },
        Leave: {
          Name: Started.Leave
        },
        BeforeEnter: {
          Name: Started.BeforeEnter
        },
        AfterLeave: {
          Name: Started.AfterLeave
        },
        Events: []
      },
      Correlations: [
        {
          ConfigureConsumeTopology: true,
          FilterFactory: {
            Type: SagaFilterFactory<SagaStateMachineTests.ConsumerSaga, SagaStateMachineTests.Start>,
            Target: MassTransitEventCorrelationConfigurator<SagaStateMachineTests.ConsumerSaga, SagaStateMachineTests.Start>.<>c,
            Method: MassTransit.IFilter`1[MassTransit.ConsumeContext`1[Tests.SagaStateMachineTests+Start]] CorrelateById(MassTransit.ISagaRepository`1[Tests.SagaStateMachineTests+ConsumerSaga], MassTransit.ISagaPolicy`2[Tests.SagaStateMachineTests+ConsumerSaga,Tests.SagaStateMachineTests+Start], MassTransit.IPipe`1[MassTransit.SagaConsumeContext`2[Tests.SagaStateMachineTests+ConsumerSaga,Tests.SagaStateMachineTests+Start]])
          },
          Event: {
            Name: StartEvent
          },
          DataType: SagaStateMachineTests.Start,
          MessageFilter: {},
          Policy: {
            IsReadOnly: false
          }
        }
      ],
      Accessor: {},
      Initial: {
        Name: Initial,
        Enter: {
          Name: Initial.Enter
        },
        Leave: {
          Name: Initial.Leave
        },
        BeforeEnter: {
          Name: Initial.BeforeEnter
        },
        AfterLeave: {
          Name: Initial.AfterLeave
        },
        Events: [
          {
            Name: StartEvent
          }
        ]
      },
      Final: {
        Name: Final,
        Enter: {
          Name: Final.Enter
        },
        Leave: {
          Name: Final.Leave
        },
        BeforeEnter: {
          Name: Final.BeforeEnter
        },
        AfterLeave: {
          Name: Final.AfterLeave
        },
        Events: []
      },
      States: [
        {
          Name: Initial,
          Enter: {
            Name: Initial.Enter
          },
          Leave: {
            Name: Initial.Leave
          },
          BeforeEnter: {
            Name: Initial.BeforeEnter
          },
          AfterLeave: {
            Name: Initial.AfterLeave
          },
          Events: [
            {
              Name: StartEvent
            }
          ]
        },
        {
          Name: Final,
          Enter: {
            Name: Final.Enter
          },
          Leave: {
            Name: Final.Leave
          },
          BeforeEnter: {
            Name: Final.BeforeEnter
          },
          AfterLeave: {
            Name: Final.AfterLeave
          },
          Events: []
        },
        {
          Name: Started,
          Enter: {
            Name: Started.Enter
          },
          Leave: {
            Name: Started.Leave
          },
          BeforeEnter: {
            Name: Started.BeforeEnter
          },
          AfterLeave: {
            Name: Started.AfterLeave
          },
          Events: []
        }
      ],
      Events: [
        {
          Name: StartEvent
        }
      ]
    }
  }
}